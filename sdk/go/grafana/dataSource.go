// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DataSource struct {
	pulumi.CustomResourceState

	AccessMode        pulumi.StringPtrOutput              `pulumi:"accessMode"`
	BasicAuthEnabled  pulumi.BoolPtrOutput                `pulumi:"basicAuthEnabled"`
	BasicAuthPassword pulumi.StringPtrOutput              `pulumi:"basicAuthPassword"`
	BasicAuthUsername pulumi.StringPtrOutput              `pulumi:"basicAuthUsername"`
	DatabaseName      pulumi.StringPtrOutput              `pulumi:"databaseName"`
	IsDefault         pulumi.BoolPtrOutput                `pulumi:"isDefault"`
	JsonDatas         DataSourceJsonDataArrayOutput       `pulumi:"jsonDatas"`
	Name              pulumi.StringOutput                 `pulumi:"name"`
	Password          pulumi.StringPtrOutput              `pulumi:"password"`
	SecureJsonDatas   DataSourceSecureJsonDataArrayOutput `pulumi:"secureJsonDatas"`
	Type              pulumi.StringOutput                 `pulumi:"type"`
	Url               pulumi.StringPtrOutput              `pulumi:"url"`
	Username          pulumi.StringPtrOutput              `pulumi:"username"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &DataSourceArgs{}
	}
	var resource DataSource
	err := ctx.RegisterResource("grafana:/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("grafana:/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	AccessMode        *string                    `pulumi:"accessMode"`
	BasicAuthEnabled  *bool                      `pulumi:"basicAuthEnabled"`
	BasicAuthPassword *string                    `pulumi:"basicAuthPassword"`
	BasicAuthUsername *string                    `pulumi:"basicAuthUsername"`
	DatabaseName      *string                    `pulumi:"databaseName"`
	IsDefault         *bool                      `pulumi:"isDefault"`
	JsonDatas         []DataSourceJsonData       `pulumi:"jsonDatas"`
	Name              *string                    `pulumi:"name"`
	Password          *string                    `pulumi:"password"`
	SecureJsonDatas   []DataSourceSecureJsonData `pulumi:"secureJsonDatas"`
	Type              *string                    `pulumi:"type"`
	Url               *string                    `pulumi:"url"`
	Username          *string                    `pulumi:"username"`
}

type DataSourceState struct {
	AccessMode        pulumi.StringPtrInput
	BasicAuthEnabled  pulumi.BoolPtrInput
	BasicAuthPassword pulumi.StringPtrInput
	BasicAuthUsername pulumi.StringPtrInput
	DatabaseName      pulumi.StringPtrInput
	IsDefault         pulumi.BoolPtrInput
	JsonDatas         DataSourceJsonDataArrayInput
	Name              pulumi.StringPtrInput
	Password          pulumi.StringPtrInput
	SecureJsonDatas   DataSourceSecureJsonDataArrayInput
	Type              pulumi.StringPtrInput
	Url               pulumi.StringPtrInput
	Username          pulumi.StringPtrInput
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	AccessMode        *string                    `pulumi:"accessMode"`
	BasicAuthEnabled  *bool                      `pulumi:"basicAuthEnabled"`
	BasicAuthPassword *string                    `pulumi:"basicAuthPassword"`
	BasicAuthUsername *string                    `pulumi:"basicAuthUsername"`
	DatabaseName      *string                    `pulumi:"databaseName"`
	IsDefault         *bool                      `pulumi:"isDefault"`
	JsonDatas         []DataSourceJsonData       `pulumi:"jsonDatas"`
	Name              *string                    `pulumi:"name"`
	Password          *string                    `pulumi:"password"`
	SecureJsonDatas   []DataSourceSecureJsonData `pulumi:"secureJsonDatas"`
	Type              string                     `pulumi:"type"`
	Url               *string                    `pulumi:"url"`
	Username          *string                    `pulumi:"username"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	AccessMode        pulumi.StringPtrInput
	BasicAuthEnabled  pulumi.BoolPtrInput
	BasicAuthPassword pulumi.StringPtrInput
	BasicAuthUsername pulumi.StringPtrInput
	DatabaseName      pulumi.StringPtrInput
	IsDefault         pulumi.BoolPtrInput
	JsonDatas         DataSourceJsonDataArrayInput
	Name              pulumi.StringPtrInput
	Password          pulumi.StringPtrInput
	SecureJsonDatas   DataSourceSecureJsonDataArrayInput
	Type              pulumi.StringInput
	Url               pulumi.StringPtrInput
	Username          pulumi.StringPtrInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}
